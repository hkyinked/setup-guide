#!/bin/bash

####################
# log error output #
####################
#if [[ $? -ne 0 ]]; then
#something went wrong, log an error message to specific log file
#logger -i -t net-failure -f "An error occured while trying to run speed test, Check your network connection" 2>&1 /path/to/logfile/$(date +"_%H:%M").log
#exit 1
#fi

#log_err() {
#logs an error message
#echo "ERROR: Command has failed to execute $1"
#LOGFILE= /path/to/logfile/$(date +_%H:%M).log
#if [ "${LOGFILE}"==0 ]; then touch "${LOGFILE}"
#else tail -f "${LOGFILE}" &
#fi
#} >>"${LOGFILE}"
#report() {
#    echo "===================================================================================================="
#    echo "$(date):$(printf ' %q' "$@")"
#    echo "===================================================================================================="
#    start=$(date +%s)
#    "$@" 2>&1
#    end=$(date +%s)
#    runtime=$((end-start))
#    echo "Elapsed time for command was $runtime seconds."
#    echo ""
#} >> "${LOGFILE}"


################
# Gets weather #
################
get_weather() {
weather="$(curl wttr\.in/'hickory,NC'?F?A?1?n?p?0?  | sed '1d;19d;20d')"
w=$(echo -e "\n\033[1;37m   $weather \033[0m")
echo -e "\n\033[1;37m   $weather \033[0m"
}

##########################################
# Run the speedtest-cli & capture output #
##########################################
output=$(speedtest-cli --simple --secure)

#######################################
# Extracts dataset from speedtest-cli #
#######################################
download=$(echo "$output" | grep 'Download:' | awk '{print $2 $3}')
upload=$(echo "$output" | grep 'Upload:' | awk '{print $2 $3}')
ping=$(echo "$output" | grep 'Ping:' | awk '{print $2 $3 }')

##############################
# Generate&append health.log #
##############################
echo -e "\033\t\v[1;35m  Good morning $USER \033[0m" >> $path.log
echo -e "\033\t\v[1;5;37m Daily Health Check-up\033[0m" >> $path.log

##############################
# Gets current date and time #
##############################
d_t="$(date)"

################################################
#Gets Memory Usage & sets color based on usage #
################################################
m="$(free -m | awk '/Mem/ {printf "%.0f", $3*100/$2 }')"
printf -v m_u "%.1f%%" $m

############################################
# set the color text based on memory usage #
############################################
mem() {
if [[ $m -ge 20 ]]; then
echo -e "\t\033[1;5;40m $m_u \033[0m"
elif [[ $m -ge 10 && $m -le 19 ]]; then
echo -e "\t\033[1;3;33m $m_u \033[0m"
else [[ $m -le 9 ]]
echo -e "\t\033[1;3;32m $m_u \033[0m"
fi
}

######################
# Check system temps #
######################
tps=$(sensors | awk '/Core 0/ {print $3} ')
cT=$( echo $tps | sed 's/[+Â°C]//g')
printf -v t "%.0f" $cT

tmp() {
if [[ $t -ge 50 ]]; then
echo -e "\t\033[1;5;40m $tps \033[0m"
elif [[ $t -ge 21 && $t -le 49 ]]; then
echo -e "\t\033[1;3;33m $tps \033[0m"
else [[ $t -le 20 ]]
echo -e "\t\033[1;3;32m $tps \033[0m"
fi
}

#######################################
# Gets system uptime and average load #
#######################################
U=$(uptime)
D=$(awk '/up/ {print $3,$4}' <<< "$U")
A=$(awk '/average:/ { print $10,$11,$12}' <<< "$U")

##############################
# Writing data to Health.log #
##############################

### current date and time ###
echo -e "\n\033[1m Current date and time:\033[0m \033[3;32m $d_t \033[0m" >> $path.log
sleep 1
### current memory usage ###
echo -e "\n\033[1m Memory Usage:\033[0m \t" >> $path.log
### forces the color function ###
mem >> $path.log
sleep 1
echo -e "\n\033[1m System Core Temps:\033[0m \t" >> $path.log
tmp >> /home/nerdyj/.output/health.log
### number of days up ###
echo -e "\n\033[1m Days up:\033[0m \033[3;32m $D \033[0m" >> $path.log
### calls average load ###
echo -e "\n\033[1m Average Load:\033[0m \033[3;32m $A \033[0m" >> $path.log


##############################
# Calls the weather function #
##############################
#log_err 2>&1 $path.log
get_weather >> $path.log
#log_err & echo 'this failed' >> "${LOGFILE}"
#status=$?
#if [[ $status -ne 0 ]]; then
#log_err & echo "this worked!"  >> $path.log
#fi
#echo $# >> $path.log
#echo $status >> $path.log
#if [[ $status -ne 0 ]]; then log_err && echo "this process returned the exit status 0" else [[ $status -eq 1 ]] echo "the exit status returned more than 0" 2>&1 $LOGFILE
#return
#fi
sleep 2

##########################
# Display Network speeds #
##########################
echo -e "\033\v[1;37m Network Speed Test Results\033[0m" >> $path.log
sleep 1
echo -e "\n\033[1m Ping:\033[0m \033[3;32m $ping \033[0m" >> $path.log
sleep 1
echo -e "\n\033[1m Download:\033[0m \033[3;32m $download \033[0m" >> $path.log
sleep 1
echo -e "\n\033[1m Upload:\033[0m \033[3;32m $upload \033[0m" >> $path.log



########################################
# Draws line to signify end of logging #
########################################
#any content after the line should be understood as a new instance
echo "======================================================" | lolcat >> $path.log

####################################
# Display's the output of the file #
####################################
#[UN]comment the line below to display content when run, good for debugging
cat $path.log
#cat $path.log

##################
# terminate self #
##################
t=$(eval 'ps -a | grep -e "tail"')
t_c=$(echo $t | cut -d ' ' -f 1)
if [ $t_c ]; then
kill $t_c
else
exit 0
fi
exit 0
